{-# OPTIONS --cubical --safe --postfix-projections #-}
module Zq where

open import Cubical.Foundations.Everything hiding (Square)
open import Cubical.Data.Empty as โฅ
open import Cubical.Data.Equality using (_โกp_; reflp; ctop)
open import Cubical.Data.Nat
open import Cubical.Data.Sigma
open import Cubical.Data.Sum renaming (_โ_ to infix 1 _โ_)
open import Cubical.HITs.PropositionalTruncation as Tr
open import Cubical.Relation.Nullary
open import Cubical.Relation.Nullary.DecidableEq
open import Function.Base using (_โ_)
open import Level using (0โ; _โ_)

open import Zb

-- Pairs

infix 2 _ร_ _ร?_
_ร_ : โ {a b} โ Type a โ Type b โ Type (a โ b)
A ร B = ฮฃ A \ _ โ B

_ร?_ : โ {a b} {A : Type a} {B : Type b} โ Dec A โ Dec B โ Dec (A ร B)
yes a ร? yes b = yes (a , b)
yes _ ร? no ยฌb = no ฮป (a , b) โ ยฌb b
no ยฌa ร? _ = no ฮป (a , b) โ ยฌa a

-- Cubical stuff

module _ {โ} {A : Type โ} where

  infixr 30 _โโ_

  diag36 : {a b c : A} (p : a โก b) (q : b โก c) โ Square p q p q
  diag36 {a = a} {b} {c} p q =
    top-face (diag3 p) (diag6 (sym q)) (diag3 p) (diag6 (sym q)) (ฮป _ _ โ b)

  isSetโsquareFull : isSet A โ
                     {a0 a1 b0 b1 : A} (aa : a0 โก a1) (bb : b0 โก b1)
                     (ab0 : a0 โก b0) (ab1 : a1 โก b1) โ Square aa bb ab0 ab1
  isSetโsquareFull is aa bb ab0 ab1 = toPathP (is _ _ _ _)

  reface-Square : {a0 a1 b0 b1 : A} {aa aaโฒ : a0 โก a1} {bb bbโฒ : b0 โก b1}
                  {ab0 ab0โฒ : a0 โก b0} {ab1 ab1โฒ : a1 โก b1} โ
                  aa โก aaโฒ โ bb โก bbโฒ โ ab0 โก ab0โฒ โ ab1 โก ab1โฒ โ
                  Square aaโฒ bbโฒ ab0โฒ ab1โฒ โ Square aa bb ab0 ab1
  reface-Square aaq bbq ab0q ab1q sq =
    top-face (ฮป i j โ aaq j i) (ฮป i j โ bbq j i)
             (ฮป i j โ ab0q j i) (ฮป i j โ ab1q j i) sq

  _โโ_ : โ {a0 a1 b0 b1 c0 c1 : A} {aa : a0 โก a1} {bb : b0 โก b1} {cc : c0 โก c1}
         {ab0 : a0 โก b0} {bc0 : b0 โก c0} {ab1 : a1 โก b1} {bc1 : b1 โก c1} โ
         Square aa bb ab0 ab1 โ Square bb cc bc0 bc1 โ
         Square aa cc (ab0 โ bc0) (ab1 โ bc1)
  (ฮฑ โโ ฮฒ) i = ฮฑ i โ ฮฒ i

-- Integers as differences of two natural numbers

infix 6 _-_ _-โค_

data โคq : Type 0โ where
  _-_ : (m n : โ) โ โคq
  reduce : โ m n โ suc m - suc n โก m - n

-- Normal forms: differences where at least one is 0

record ๐ซq : Type 0โ where
  constructor _-_[_]
  field
    pos : โ
    neg : โ
    either0 : โฅ pos โก 0 โ neg โก 0 โฅ
open ๐ซq public

reflectโฒ : โ ร โ โ ๐ซq
reflectโฒ (0 , n) = 0 - n [ โฃ inl refl โฃ ]
reflectโฒ (m@(suc _) , 0) = m - 0 [ โฃ inr refl โฃ ]
reflectโฒ (suc m , suc n) = reflectโฒ (m , n)

reflect : โคq โ ๐ซq
reflect (m - n) = reflectโฒ (m , n)
reflect (reduce m n i) = reflectโฒ (m , n)

reify : ๐ซq โ โคq
reify (m - n [ prf ]) = m - n

reflect-reify : โ z โ reflect (reify z) โก z
reflect-reify (0 - n [ prf ]) =
  ฮป i โ 0 - n [ squash โฃ inl refl โฃ prf i ]
reflect-reify (m@(suc _) - 0 [ prf ]) =
  ฮป i โ m - 0 [ squash โฃ inr refl โฃ prf i ]
reflect-reify (suc m - suc n [ prf ]) = โฅ.rec
  (Tr.rec {P = โฅ} (ฮป ()) (ฮป { (inl q) โ snotz q ; (inr q) โ snotz q }) prf)

reify-reflectโฒ : (mn@(m , n) : โ ร โ) โ reify (reflectโฒ mn) โก m - n
reify-reflectโฒ (0 , n) = refl
reify-reflectโฒ (m@(suc _) , 0) = refl
reify-reflectโฒ (suc m , suc n) = reify-reflectโฒ (m , n) โ sym (reduce m n)

reify-reflect : โ z โ reify (reflect z) โก z
reify-reflect (m - n) = reify-reflectโฒ (m , n)
reify-reflect (reduce m n i) j =
  reface-Square refl refl refl (rUnit _)
    ((ฮป _ j โ reify-reflectโฒ (m , n) j) โโ diag2 (reduce m n))
    i j

โคqis๐ซq : โคq โ ๐ซq
โคqis๐ซq = isoToEquiv record
  { fun = reflect; inv = reify
  ; rightInv = reflect-reify; leftInv = reify-reflect
  }

-- ๐ซq is a set, so โคq is too.

to-๐ซqโก : โ {mx my nx ny ex ey} โ mx โก my ร nx โก ny โ
      mx - nx [ ex ] โก my - ny [ ey ]
to-๐ซqโก {mx} {_} {nx} {_} {ex} {ey} (p , q)
  with reflp โ ctop p | reflp โ ctop q = ฮป i โ mx - nx [ squash ex ey i ]

from-๐ซqโก : โ {x y} โ x โก y โ x .pos โก y .pos ร x .neg โก y .neg
from-๐ซqโก q .fst i = q i .pos
from-๐ซqโก q .snd i = q i .neg

_โ๐ซq_ : Discrete ๐ซq
x@(mx - nx [ ex ]) โ๐ซq y@(my - ny [ ey ]) =
  mapDec to-๐ซqโก (_โ from-๐ซqโก) (discreteโ mx my ร? discreteโ nx ny)

๐ซq-isSet : isSet ๐ซq
๐ซq-isSet = DiscreteโisSet _โ๐ซq_

โคq-isSet : isSet โคq
โคq-isSet = subst isSet (sym (ua โคqis๐ซq)) ๐ซq-isSet

-- โคq is also equivalent to the bi-invertible maps definition.
-- Note: we rely on โค and โคq being sets.

-- โค โ โคq

zeroโคq : โคq
zeroโคq = 0 - 0

succโคq : โคq โ โคq
succโคq (m - n) = suc m - n
succโคq (reduce m n i) = reduce (suc m) n i

predโคq : โคq โ โคq
predโคq (m - n) = m - suc n
predโคq (reduce m n i) = reduce m (suc n) i

pred-succโคq : โ z โ predโคq (succโคq z) โก z
pred-succโคq (m - n) = reduce m n
pred-succโคq (reduce m n i) j = diag36 (reduce (suc m) (suc n)) (reduce m n) i j

succ-predโคq : โ z โ succโคq (predโคq z) โก z
succ-predโคq (m - n) = reduce m n
succ-predโคq (reduce m n i) j = diag36 (reduce (suc m) (suc n)) (reduce m n) i j

โคtoโคq : โค โ โคq
โคtoโคq zero = zeroโคq
โคtoโคq (succ z) = succโคq (โคtoโคq z)
โคtoโคq (pred1 z) = predโคq (โคtoโคq z)
โคtoโคq (pred2 z) = predโคq (โคtoโคq z)
โคtoโคq (s z i) = pred-succโคq (โคtoโคq z) i
โคtoโคq (r z i) = succ-predโคq (โคtoโคq z) i

-- โคq โ โค

โtoโค : โ โ โค
โtoโค zero = zero
โtoโค (suc m) = succ (โtoโค m)

_-โค_ : (m n : โ) โ โค
m -โค zero = โtoโค m
m -โค suc n = pred1 (m -โค n)

sucโฟ-โค : โ m n โ suc m -โค n โก succ (m -โค n)
sucโฟ-โค m zero = refl
sucโฟ-โค m (suc n) = cong pred1 (sucโฟ-โค m n) โ s _ โ sym (r' _)

โคqtoโค : โคq โ โค
โคqtoโค (m - n) = m -โค n
โคqtoโค (reduce m n i) = (cong pred1 (sucโฟ-โค m n) โ s (m -โค n)) i

-- Equivalence to โค

โtoโคtoโคq : โ m โ โคtoโคq (โtoโค m) โก m - 0
โtoโคtoโคq zero = refl
โtoโคtoโคq (suc m) = cong succโคq (โtoโคtoโคq m)

โฆ-โคโง : โ m n โ โคtoโคq (m -โค n) โก m - n
โฆ-โคโง m zero = โtoโคtoโคq m
โฆ-โคโง m (suc n) = cong predโคq (โฆ-โคโง m n)

โฆsuccโคqโง : โ z โ โคqtoโค (succโคq z) โก succ (โคqtoโค z)
โฆsuccโคqโง (m - n) = sucโฟ-โค m n
โฆsuccโคqโง (reduce m n i) j =
  isSetโsquareFull โค-isSet
    (cong โคqtoโค (reduce (suc m) n))
    (cong succ (cong โคqtoโค (reduce m n)))
    (sucโฟ-โค (suc m) (suc n))
    (sucโฟ-โค m n) i j

โฆpred1โคqโง : โ z โ โคqtoโค (predโคq z) โก pred1 (โคqtoโค z)
โฆpred1โคqโง (m - n) = refl
โฆpred1โคqโง (reduce m n i) j =
  โค-isSet _ _
    (cong pred1 (sucโฟ-โค m (suc n)) โ s (pred1 (m -โค n)))
    (cong pred1 (cong โคqtoโค (reduce m n))) j i

โฆpred2โคqโง : โ z โ โคqtoโค (predโคq z) โก pred2 (โคqtoโค z)
โฆpred2โคqโง z = โฆpred1โคqโง z โ coh _

โคqtoโคtoโคq : โ z โ โคtoโคq (โคqtoโค z) โก z
โคqtoโคtoโคq (m - n) = โฆ-โคโง m n
โคqtoโคtoโคq (reduce m n i) j =
  isSetโsquareFull โคq-isSet
    (cong โคtoโคq (cong โคqtoโค (reduce m n)))
    (reduce m n)
    (โคqtoโคtoโคq (suc m - suc n))
    (โคqtoโคtoโคq (m - n)) i j

โคtoโคqtoโค : โ z โ โคqtoโค (โคtoโคq z) โก z
โคtoโคqtoโค zero = refl
โคtoโคqtoโค (succ z) = โฆsuccโคqโง (โคtoโคq z) โ cong succ (โคtoโคqtoโค z)
โคtoโคqtoโค (pred1 z) = โฆpred1โคqโง (โคtoโคq z) โ cong pred1 (โคtoโคqtoโค z)
โคtoโคqtoโค (pred2 z) = โฆpred2โคqโง (โคtoโคq z) โ cong pred2 (โคtoโคqtoโค z)
โคtoโคqtoโค (s z i) j =
  let zโฒ = โคtoโคq z in
  isSetโsquareFull โค-isSet
    (cong โคqtoโค (cong โคtoโคq (s z)))
    (s z)
    (โฆpred1โคqโง (succโคq zโฒ)
      โ cong pred1 (โฆsuccโคqโง zโฒ โ cong succ (โคtoโคqtoโค z)))
    (โคtoโคqtoโค z) i j
โคtoโคqtoโค (r z i) j =
  isSetโsquareFull โค-isSet
    (cong โคqtoโค (cong โคtoโคq (r z)))
    (r z)
    (โฆsuccโคqโง (โคtoโคq (pred2 z))
      โ cong succ (โฆpred2โคqโง (โคtoโคq z) โ cong pred2 (โคtoโคqtoโค z)))
    (โคtoโคqtoโค z) i j

โคโโคq : โค โ โคq
โคโโคq = isoToEquiv (iso โคtoโคq โคqtoโค โคqtoโคtoโคq โคtoโคqtoโค)
